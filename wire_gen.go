// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"inventory-system-api/app"
	"inventory-system-api/controller"
	"inventory-system-api/repository"
	"inventory-system-api/service"
	"net/http"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from injector.go:

func InitializedServer() *http.Server {
	db := app.Database()
	validate := ProvideValidator()
	usersRepository := repository.NewUserRepositoryImpl()
	usersService := service.NewUsersServiceImpl(db, validate, usersRepository)
	logActivityRepository := repository.NewLogActivityRepositoryImpl()
	logActivityService := service.NewLogActivityServiceImpl(db, logActivityRepository)
	usersController := controller.NewUsersControllerImpl(usersService, logActivityService)
	productsRepository := repository.NewProductsRepositoryImpl()
	stockRepository := repository.NewStockRepositoryImpl()
	cloudinary := app.NewCloudinary()
	productsService := service.NewProductServiceImpl(db, productsRepository, stockRepository, cloudinary, validate)
	productsController := controller.NewProductsControllerImpl(productsService, logActivityService)
	logController := controller.NewLogControllerImpl(logActivityService)
	router := app.NewRouter(usersController, productsController, logController)
	server := NewServer(router)
	return server
}

// injector.go:

var logSet = wire.NewSet(repository.NewLogActivityRepositoryImpl, service.NewLogActivityServiceImpl, controller.NewLogControllerImpl)

var userSet = wire.NewSet(repository.NewUserRepositoryImpl, service.NewUsersServiceImpl, controller.NewUsersControllerImpl)

var productSet = wire.NewSet(repository.NewProductsRepositoryImpl, repository.NewStockRepositoryImpl, service.NewProductServiceImpl, controller.NewProductsControllerImpl)

func ProvideValidator() *validator.Validate {
	return validator.New()
}
